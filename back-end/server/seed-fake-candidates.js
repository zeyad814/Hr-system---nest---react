const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcrypt');

const prisma = new PrismaClient();

// Arabic names and realistic data
const arabicNames = [
  'ุฃุญูุฏ ูุญูุฏ ุงูุนุชูุจู',
  'ูุงุทูุฉ ุนุจุฏุงููู ุงูุณุนูุฏ',
  'ูุญูุฏ ุนูู ุงููุญุทุงูู',
  'ููุฑุง ุณุนุฏ ุงูุบุงูุฏู',
  'ุนุจุฏุงูุฑุญูู ุฎุงูุฏ ุงูุดูุฑู',
  'ุฑูู ุนุจุฏุงูุนุฒูุฒ ุงููุทูุฑู',
  'ุณุนุฏ ุฃุญูุฏ ุงูุฒูุฑุงูู',
  'ููุฏ ูุญูุฏ ุงูุจููู',
  'ุฎุงูุฏ ุนุจุฏุงููู ุงูุนุชูุจู',
  'ูุฑูู ุณุนุฏ ุงููุญุทุงูู',
  'ุนุจุฏุงููู ูุญูุฏ ุงูุดูุฑู',
  'ูููุง ุฃุญูุฏ ุงูุบุงูุฏู',
  'ููุณู ุฎุงูุฏ ุงููุทูุฑู',
  'ุณุงุฑุฉ ุนุจุฏุงูุนุฒูุฒ ุงูุจููู',
  'ุนูุฑ ูุญูุฏ ุงูุฒูุฑุงูู',
  'ููุฑ ุนุจุฏุงููู ุงูุนุชูุจู',
  'ุจุฏุฑ ุณุนุฏ ุงููุญุทุงูู',
  'ุฒููุจ ุฃุญูุฏ ุงูุดูุฑู',
  'ุทุงุฑู ุฎุงูุฏ ุงูุบุงูุฏู',
  'ููุฏ ูุญูุฏ ุงููุทูุฑู'
];

const arabicEmails = [
  'ahmed.mohammed@email.com',
  'fatima.abdullah@email.com',
  'mohammed.ali@email.com',
  'nora.saad@email.com',
  'abdulrahman.khalid@email.com',
  'reem.abdulaziz@email.com',
  'saad.ahmed@email.com',
  'hind.mohammed@email.com',
  'khalid.abdullah@email.com',
  'mariam.saad@email.com',
  'abdullah.mohammed@email.com',
  'lina.ahmed@email.com',
  'yousef.khalid@email.com',
  'sara.abdulaziz@email.com',
  'omar.mohammed@email.com',
  'nour.abdullah@email.com',
  'badr.saad@email.com',
  'zainab.ahmed@email.com',
  'tariq.khalid@email.com',
  'fahad.mohammed@email.com'
];

const phoneNumbers = [
  '+966501234567',
  '+966502345678',
  '+966503456789',
  '+966504567890',
  '+966505678901',
  '+966506789012',
  '+966507890123',
  '+966508901234',
  '+966509012345',
  '+966500123456',
  '+966511234567',
  '+966522345678',
  '+966533456789',
  '+966544567890',
  '+966555678901',
  '+966566789012',
  '+966577890123',
  '+966588901234',
  '+966599012345',
  '+966500123456'
];

const locations = [
  'ุงูุฑูุงุถุ ุงูููููุฉ ุงูุนุฑุจูุฉ ุงูุณุนูุฏูุฉ',
  'ุฌุฏุฉุ ุงูููููุฉ ุงูุนุฑุจูุฉ ุงูุณุนูุฏูุฉ',
  'ุงูุฏูุงูุ ุงูููููุฉ ุงูุนุฑุจูุฉ ุงูุณุนูุฏูุฉ',
  'ููุฉ ุงูููุฑูุฉุ ุงูููููุฉ ุงูุนุฑุจูุฉ ุงูุณุนูุฏูุฉ',
  'ุงููุฏููุฉ ุงููููุฑุฉุ ุงูููููุฉ ุงูุนุฑุจูุฉ ุงูุณุนูุฏูุฉ',
  'ุงูุทุงุฆูุ ุงูููููุฉ ุงูุนุฑุจูุฉ ุงูุณุนูุฏูุฉ',
  'ุจุฑูุฏุฉุ ุงูููููุฉ ุงูุนุฑุจูุฉ ุงูุณุนูุฏูุฉ',
  'ุชุจููุ ุงูููููุฉ ุงูุนุฑุจูุฉ ุงูุณุนูุฏูุฉ',
  'ุฎููุณ ูุดูุทุ ุงูููููุฉ ุงูุนุฑุจูุฉ ุงูุณุนูุฏูุฉ',
  'ุงูููููุ ุงูููููุฉ ุงูุนุฑุจูุฉ ุงูุณุนูุฏูุฉ'
];

const skills = [
  'JavaScript, React, Node.js, TypeScript',
  'Python, Django, PostgreSQL, Docker',
  'Java, Spring Boot, MySQL, Microservices',
  'C#, .NET Core, SQL Server, Azure',
  'PHP, Laravel, MySQL, Vue.js',
  'React Native, Flutter, Firebase',
  'Angular, TypeScript, RxJS, Material UI',
  'Vue.js, Nuxt.js, MongoDB, Express',
  'Go, Gin, PostgreSQL, Kubernetes',
  'Ruby, Rails, PostgreSQL, Redis',
  'Swift, iOS Development, Core Data',
  'Kotlin, Android Development, Room',
  'DevOps, AWS, Docker, Jenkins',
  'Data Science, Python, Pandas, Scikit-learn',
  'Machine Learning, TensorFlow, PyTorch',
  'UI/UX Design, Figma, Adobe XD',
  'Project Management, Agile, Scrum',
  'Digital Marketing, SEO, Google Analytics',
  'Sales, CRM, Lead Generation',
  'Customer Service, Communication, Problem Solving'
];

const experiences = [
  'ูุจุชุฏุฆ (0-2 ุณููุงุช)',
  'ูุชูุณุท (2-5 ุณููุงุช)',
  'ูุชูุฏู (5-8 ุณููุงุช)',
  'ุฎุจูุฑ (8+ ุณููุงุช)'
];

const educations = [
  'ุจูุงููุฑููุณ ุนููู ุงูุญุงุณุจ',
  'ุจูุงููุฑููุณ ููุฏุณุฉ ุงูุจุฑูุฌูุงุช',
  'ุจูุงููุฑููุณ ูุธู ุงููุนูููุงุช',
  'ุจูุงููุฑููุณ ุงูููุฏุณุฉ ุงูููุฑุจุงุฆูุฉ',
  'ุจูุงููุฑููุณ ุฅุฏุงุฑุฉ ุงูุฃุนูุงู',
  'ุจูุงููุฑููุณ ุงูุชุณููู',
  'ุจูุงููุฑููุณ ุงููุญุงุณุจุฉ',
  'ุจูุงููุฑููุณ ุงูุชูููู',
  'ูุงุฌุณุชูุฑ ุนููู ุงูุญุงุณุจ',
  'ูุงุฌุณุชูุฑ ุฅุฏุงุฑุฉ ุงูุฃุนูุงู',
  'ุฏุจููู ุชูููุฉ ุงููุนูููุงุช',
  'ุฏุจููู ุงูุชุณููู ุงูุฑููู'
];

const jobTitles = [
  'ูุทูุฑ React ุฃูู',
  'ูุทูุฑ Python',
  'ูุทูุฑ Java',
  'ูุทูุฑ .NET',
  'ูุทูุฑ PHP',
  'ูุทูุฑ ุชุทุจููุงุช ุงูุฌูุงู',
  'ูุตูู UI/UX',
  'ูุญูู ุจูุงูุงุช',
  'ูููุฏุณ DevOps',
  'ูุฏูุฑ ูุดุงุฑูุน',
  'ุฃุฎุตุงุฆู ุชุณููู ุฑููู',
  'ุฃุฎุตุงุฆู ูุจูุนุงุช',
  'ูุญุงุณุจ ุฃูู',
  'ุฃุฎุตุงุฆู ููุงุฑุฏ ุจุดุฑูุฉ',
  'ูุฏูุฑ ุนูููุงุช'
];

const companies = [
  'ุดุฑูุฉ ุงูุชูููุฉ ุงููุชูุฏูุฉ',
  'ูุฌููุนุฉ ุงูุญููู ุงูุฐููุฉ',
  'ุดุฑูุฉ ุงูุชุทููุฑ ุงูุฑููู',
  'ูุคุณุณุฉ ุงูุงุจุชูุงุฑ ุงูุชููู',
  'ุดุฑูุฉ ุงูุฃูุธูุฉ ุงููุชูุงููุฉ',
  'ูุฌููุนุฉ ุงูุจูุงูุงุช ุงูุถุฎูุฉ',
  'ุดุฑูุฉ ุงูุญูุณุจุฉ ุงูุณุญุงุจูุฉ',
  'ูุคุณุณุฉ ุงูุฐูุงุก ุงูุงุตุทูุงุนู',
  'ุดุฑูุฉ ุงูุฃูู ุงูุณูุจุฑุงูู',
  'ูุฌููุนุฉ ุงูุชุทุจููุงุช ุงูุฐููุฉ'
];

const clientNames = [
  'ุดุฑูุฉ ุงููุฎูู ููุงุณุชุซูุงุฑ',
  'ูุฌููุนุฉ ุงูุฑุคูุฉ ุงููุณุชูุจููุฉ',
  'ุดุฑูุฉ ุงูุฃูู ุงูุฌุฏูุฏ',
  'ูุคุณุณุฉ ุงูุชููุฒ ุงูุชุฌุงุฑู',
  'ุดุฑูุฉ ุงููุฌูู ุงููุชูุฃูุฆุฉ',
  'ูุฌููุนุฉ ุงูุฑูุงุฏุฉ ุงูุตูุงุนูุฉ',
  'ุดุฑูุฉ ุงูุฃุตุงูุฉ ูุงูุฌูุฏุฉ',
  'ูุคุณุณุฉ ุงูุชุทููุฑ ุงููุณุชุฏุงู',
  'ุดุฑูุฉ ุงูุฅุจุฏุงุน ูุงูุงุจุชูุงุฑ',
  'ูุฌููุนุฉ ุงูุชูุฏู ุงูุชููู'
];

async function main() {
  console.log('๐ฑ Starting fake candidates seed...');

  // Hash password for all test users
  const passwordHash = await bcrypt.hash('Pass123!', 10);

  // Create fake clients first
  console.log('๐ Creating fake clients...');
  const clients = [];
  for (let i = 0; i < 5; i++) {
    // Check if user already exists
    let clientUser = await prisma.user.findUnique({
      where: { email: `client${i + 1}@test.com` }
    });

    if (!clientUser) {
      clientUser = await prisma.user.create({
        data: {
          email: `client${i + 1}@test.com`,
          name: clientNames[i],
          passwordHash,
          role: 'CLIENT',
          department: 'ุฅุฏุงุฑุฉ ุงูุดุฑูุฉ',
          position: 'ูุฏูุฑ ุนุงู',
          status: 'ACTIVE'
        }
      });
    }

    // Check if client already exists
    let client = await prisma.client.findFirst({
      where: { userId: clientUser.id }
    });

    if (!client) {
      client = await prisma.client.create({
        data: {
          userId: clientUser.id,
          name: clientNames[i],
          companyName: clientNames[i],
          industry: 'ุชูููุฉ ุงููุนูููุงุช',
          email: `client${i + 1}@test.com`,
          phone: phoneNumbers[i],
          location: locations[i],
          description: `ุดุฑูุฉ ${clientNames[i]} - ุนููู ุชุฌุฑูุจู ููุงุฎุชุจุงุฑ`,
          status: 'SIGNED'
        }
      });
    }
    clients.push(client);
    console.log(`โ Created client: ${client.name}`);
  }

  // Create fake jobs
  console.log('๐ผ Creating fake jobs...');
  const jobs = [];
  for (let i = 0; i < 8; i++) {
    const job = await prisma.job.create({
      data: {
        title: jobTitles[i],
        company: companies[i % companies.length],
        location: locations[i % locations.length],
        jobType: ['FULL_TIME', 'PART_TIME', 'CONTRACT'][i % 3],
        department: 'ุชูููุฉ ุงููุนูููุงุช',
        description: `ูุตู ูุธููุฉ ${jobTitles[i]} ูู ${companies[i % companies.length]}. ูุญู ูุจุญุซ ุนู ูุชุฎุตุต ูุชููุฒ ููุงูุถูุงู ุฅูู ูุฑูููุง.`,
        requirements: `ูุชุทูุจุงุช ุงููุธููุฉ:\n- ุฎุจุฑุฉ ูู ${skills[i % skills.length]}\n- ${experiences[i % experiences.length]}\n- ${educations[i % educations.length]}\n- ููุงุฑุงุช ุงูุชูุงุตู ูุงูุนูู ุงูุฌูุงุนู`,
        requiredSkills: skills[i % skills.length],
        salaryRange: `${(i + 1) * 5000}-${(i + 2) * 5000} ุฑูุงู ุณุนูุฏู`,
        applicationDeadline: new Date(Date.now() + (i + 1) * 7 * 24 * 60 * 60 * 1000), // 1-8 weeks from now
        clientId: clients[i % clients.length].id,
        status: 'OPEN'
      }
    });
    jobs.push(job);
    console.log(`โ Created job: ${job.title}`);
  }

  // Create fake candidates
  console.log('๐ฅ Creating fake candidates...');
  const candidates = [];
  for (let i = 0; i < 20; i++) {
    // Check if user already exists
    let user = await prisma.user.findUnique({
      where: { email: arabicEmails[i] }
    });

    if (!user) {
      user = await prisma.user.create({
        data: {
          email: arabicEmails[i],
          name: arabicNames[i],
          passwordHash,
          role: 'APPLICANT',
          department: null,
          position: null,
          status: 'ACTIVE'
        }
      });
    }

    // Check if applicant already exists
    let applicant = await prisma.applicant.findUnique({
      where: { userId: user.id }
    });

    if (!applicant) {
      applicant = await prisma.applicant.create({
        data: {
          userId: user.id,
          phone: phoneNumbers[i],
          address: `${locations[i % locations.length]}, ุดุงุฑุน ุงูููู ููุฏ`,
          location: locations[i % locations.length],
          dateOfBirth: new Date(1990 + (i % 15), i % 12, (i % 28) + 1),
          nationality: 'ุณุนูุฏู',
          gender: i % 2 === 0 ? 'MALE' : 'FEMALE',
          maritalStatus: ['SINGLE', 'MARRIED'][i % 2],
          skills: skills[i],
          experience: experiences[i % experiences.length],
          education: educations[i % educations.length],
          languages: 'ุงูุนุฑุจูุฉุ ุงูุฅูุฌููุฒูุฉ',
          portfolio: `https://portfolio${i}.com`,
          website: `https://website${i}.com`,
          linkedin: `https://linkedin.com/in/candidate${i}`,
          github: `https://github.com/candidate${i}`,
          bio: `ูุฑุดุญ ุชุฌุฑูุจู ${i + 1} - ${arabicNames[i]} - ูุชุฎุตุต ูู ${skills[i]}`,
          avatar: `https://ui-avatars.com/api/?name=${encodeURIComponent(arabicNames[i])}&background=random`,
          rating: Math.random() * 2 + 3, // 3-5 rating
          resumeUrl: `/uploads/cvs/cv-candidate-${i + 1}.pdf`,
          coverLetter: `ุฑุณุงูุฉ ุชุบุทูุฉ ูููุฑุดุญ ${arabicNames[i]} - ุฃุชุทูุน ููุงูุถูุงู ุฅูู ูุฑูููู ุงููุชููุฒ.`,
          expectedSalary: `${(i + 1) * 3000}-${(i + 2) * 3000} ุฑูุงู ุณุนูุฏู`,
          availableFrom: new Date(Date.now() + (i % 30) * 24 * 60 * 60 * 1000),
          workType: ['FULL_TIME', 'PART_TIME', 'REMOTE', 'HYBRID'][i % 4]
        }
      });
    }

    candidates.push(applicant);
    console.log(`โ Created candidate: ${arabicNames[i]}`);
  }

  // Create job applications
  console.log('๐ Creating job applications...');
  const applications = [];
  for (let i = 0; i < candidates.length; i++) {
    // Each candidate applies to 1-3 jobs
    const numApplications = Math.floor(Math.random() * 3) + 1;
    const appliedJobs = [];
    
    for (let j = 0; j < numApplications; j++) {
      let jobId;
      do {
        jobId = jobs[Math.floor(Math.random() * jobs.length)].id;
      } while (appliedJobs.includes(jobId));
      appliedJobs.push(jobId);

      const application = await prisma.jobApplication.create({
        data: {
          jobId: jobId,
          applicantId: candidates[i].id,
          status: ['PENDING', 'INTERVIEW', 'OFFER', 'HIRED', 'REJECTED', 'WITHDRAWN'][Math.floor(Math.random() * 6)],
          resumeUrl: `/uploads/cvs/cv-candidate-${i + 1}.pdf`
        }
      });
      applications.push(application);
    }
    console.log(`โ Created ${numApplications} applications for ${arabicNames[i]}`);
  }

  // Create some interviews
  console.log('๐ฏ Creating interviews...');
  const hrUser = await prisma.user.findFirst({
    where: { role: 'HR' }
  });

  if (hrUser) {
    for (let i = 0; i < 10; i++) {
      const application = applications[Math.floor(Math.random() * applications.length)];
      const interview = await prisma.interview.create({
        data: {
          applicationId: application.id,
          scheduledBy: hrUser.id,
          interviewerIds: [hrUser.id],
          candidateId: application.applicantId,
          title: `ููุงุจูุฉ ${i + 1}`,
          description: `ููุงุจูุฉ ุชูุธูู ูููุฑุดุญ`,
          type: ['PHONE', 'VIDEO', 'IN_PERSON', 'TECHNICAL', 'HR'][i % 5],
          status: ['SCHEDULED', 'CONFIRMED', 'ATTENDED', 'NO_SHOW', 'CANCELLED', 'RESCHEDULED'][Math.floor(Math.random() * 6)],
          scheduledAt: new Date(Date.now() + (i + 1) * 24 * 60 * 60 * 1000), // 1-10 days from now
          duration: [30, 45, 60, 90][i % 4],
          location: i % 2 === 0 ? 'ููุชุจ ุงูุดุฑูุฉ' : 'ููุงุจูุฉ ุนู ุจูุนุฏ',
          notes: `ููุงุญุธุงุช ุงูููุงุจูุฉ ${i + 1}`,
          reminderSent: Math.random() > 0.5
        }
      });
      console.log(`โ Created interview: ${interview.title}`);
    }
  }

  // Create some experiences for candidates
  console.log('๐ผ Creating work experiences...');
  for (let i = 0; i < candidates.length; i++) {
    const numExperiences = Math.floor(Math.random() * 3) + 1;
    for (let j = 0; j < numExperiences; j++) {
      await prisma.experience.create({
        data: {
          applicantId: candidates[i].id,
          title: jobTitles[Math.floor(Math.random() * jobTitles.length)],
          company: companies[Math.floor(Math.random() * companies.length)],
          location: locations[Math.floor(Math.random() * locations.length)],
          startDate: new Date(2020 + j, j * 2, 1),
          endDate: j < numExperiences - 1 ? new Date(2021 + j, (j + 1) * 2, 1) : null,
          current: j === numExperiences - 1,
          description: `ูุตู ุงูุฎุจุฑุฉ ุงูุนูููุฉ ${j + 1} ูููุฑุดุญ ${arabicNames[i]}`,
          achievements: `ุฅูุฌุงุฒุงุช ูููุฉ ูู ${companies[Math.floor(Math.random() * companies.length)]}`
        }
      });
    }
    console.log(`โ Created ${numExperiences} experiences for ${arabicNames[i]}`);
  }

  // Create some education records
  console.log('๐ Creating education records...');
  for (let i = 0; i < candidates.length; i++) {
    const numEducations = Math.floor(Math.random() * 2) + 1;
    for (let j = 0; j < numEducations; j++) {
      await prisma.education.create({
        data: {
          applicantId: candidates[i].id,
          degree: educations[Math.floor(Math.random() * educations.length)],
          institution: `ุฌุงูุนุฉ ${['ุงูููู ุณุนูุฏ', 'ุงูููู ุนุจุฏุงูุนุฒูุฒ', 'ุงูุฃููุฑุฉ ููุฑุฉ', 'ุงูุฅูุงู ูุญูุฏ ุจู ุณุนูุฏ'][j % 4]}`,
          location: locations[Math.floor(Math.random() * locations.length)],
          startDate: new Date(2015 + j, 9, 1),
          endDate: new Date(2019 + j, 6, 1),
          current: false,
          gpa: `${(3.5 + Math.random() * 1.5).toFixed(2)}/5.00`,
          description: `ูุตู ุงูุชุนููู ${j + 1} ูููุฑุดุญ ${arabicNames[i]}`
        }
      });
    }
    console.log(`โ Created ${numEducations} education records for ${arabicNames[i]}`);
  }

  console.log('๐ Fake candidates seed completed successfully!');
  console.log(`๐ Summary:`);
  console.log(`   - ${candidates.length} candidates created`);
  console.log(`   - ${jobs.length} jobs created`);
  console.log(`   - ${clients.length} clients created`);
  console.log(`   - ${applications.length} job applications created`);
  console.log(`   - Multiple interviews, experiences, and education records created`);
}

main()
  .catch((e) => {
    console.error('โ Seed failed:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
